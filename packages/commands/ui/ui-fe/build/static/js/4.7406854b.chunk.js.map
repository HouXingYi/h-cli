{"version":3,"sources":["../../../../utils/template-list/lib/index.js","components/folder-explorer/index.tsx","components/project-info-modal/index.tsx","components/init-start/index.tsx","views/init.tsx","utils/http.ts","components/publish-info-modal/index.tsx","components/publish-start/index.tsx","views/publish.tsx","views/main.tsx","components/logs-modal/index.tsx","views/index.tsx"],"names":["templateList","name","npmName","installCommand","startCommand","type","version","module","exports","FolderExplorer","address","useSelector","selectAddress","folder","selectFolder","openFolder","path","e","ws","send","useMount","useEffect","length","ExplorerContainer","ToolbarContainer","shape","onClick","style","margin","icon","CaretUpOutlined","map","item","index","key","value","FoldersContainer","FolderItem","styled","div","getProjectTemplate","require","ProjectInfoModal","props","console","log","openModal","cwd","selectCwd","setOpenModal","onFinish","tempList","Option","Select","Form","useForm","form","rule","a","semver","valid","Error","forceRender","onClose","visible","width","Container","layout","initialValues","projectPath","projectName","projectVersion","projectTemplate","Item","label","rules","required","message","addonBefore","placeholder","allowClear","el","validator","textAlign","htmlType","InitStart","useState","dispatch","useDispatch","PlayCircleOutlined","size","values","setLogsModal","projectinfo","startInit","Views","apiUrl","process","http","endpoint","data","token","headers","customConfig","config","method","toUpperCase","qs","stringify","body","JSON","window","fetch","then","response","json","ok","res","errno","Promise","reject","PublishInfoModal","showCommit","setShowCommit","showBump","setShowBump","ifCommit","ifPrompt","resBranch","checkIfCommit","checkIfBump","prod","PublishStart","commit","incType","info","_","omitBy","isUndefined","publishinfo","startPublish","MainPage","routeType","units","useLocation","pathname","split","useRouteType","Aside","mode","selectedKeys","to","Main","element","location","replace","aside","LogsModal","logs","selectLogs","logsModal","selectLogsModal","closable","SpinContainer","tip","LogsContainer","reverse","marginBottom","PageHeader","Header","between","HeaderLeft","gap","resetRoute","HeaderRight","Row","main"],"mappings":"qGAAA,IAAMA,EAAe,CACjB,CACIC,KAAM,kCACNC,QAAS,iCACTC,eAAgB,OAChBC,aAAc,gBACdC,KAAM,SACNC,QAAS,SAEb,CACIL,KAAM,gCACNC,QAAS,gCACTC,eAAgB,OAChBC,aAAc,gBACdC,KAAM,SACNC,QAAS,SAEb,CACIL,KAAM,gCACNC,QAAS,gCACTC,eAAgB,OAChBC,aAAc,gBACdC,KAAM,SACNC,QAAS,UAQjBC,EAAOC,QAJP,WACI,OAAOR,I,sOCnBES,EAAiB,WAC1B,IAAMC,EAAUC,YAAYC,KACtBC,EAASF,YAAYG,KAqB3B,SAASC,EACLC,EACAC,GAEAC,IAAGC,KAAK,MAAO,aAAc,CAAEH,SAGnC,OA1BAI,aAAS,WAWLF,IAAGC,KAAK,MAAO,aAPnBE,qBAAU,WACFX,EAAQY,OAAS,GACjBJ,IAAGC,KAAK,MAAO,oBAEpB,CAACT,IAmBA,kBAACa,EAAD,KACI,kBAACC,EAAD,KACI,kBAAC,IAAD,CACInB,KAAK,UACLoB,MAAM,SACNC,QAlBhB,WAEIR,IAAGC,KAAK,MAAO,eAiBHQ,MAAO,CAAEC,OAAQ,YACjBC,KAAM,kBAACC,EAAA,EAAD,QAETpB,EAAQqB,KAAI,SAACC,EAAMC,GAChB,OACI,0BAAMC,IAAKD,GACP,kBAAC,IAAD,CACI5B,KAAK,SACL8B,MAAOH,EAAK/B,KACZ0B,MAAO,CAAEC,OAAQ,WACjBF,QAAS,SAACT,GACNF,EAAWiB,EAAKhB,QAGnBgB,EAAK/B,MATd,SAgBZ,kBAACmC,EAAD,KACKvB,EAAOkB,KAAI,SAAClB,EAAQoB,GACjB,OACI,kBAACI,EAAD,CACIH,IAAKD,EACLP,QAAS,SAACT,GACNF,EAAWF,EAAOG,QAGrBH,EAAOZ,YAS9BsB,EAAoBe,IAAOC,IAAV,kHAMjBf,EAAmBc,IAAOC,IAAV,iDAGhBH,EAAmBE,IAAOC,IAAV,iGAKhBF,EAAaC,IAAOC,IAAV,6P,iGC5FVC,EAAqBC,EAAQ,KACtBC,EAAmB,SAACC,GAK7BC,QAAQC,IAAI,kBAAmBF,EAAMG,WACrC,IAAMC,EAAMpC,YAAYqC,KAChBF,EAAsCH,EAAtCG,UAAWG,EAA2BN,EAA3BM,aAAcC,EAAaP,EAAbO,SAC3BC,EAAWX,IACTY,EAAWC,IAAXD,OAKR,MAAeE,IAAKC,UAAbC,EAAP,oBAVE,4CAYF,WAAyBC,EAAetB,GAAxC,SAAAuB,EAAA,yDACId,QAAQC,IAAI,QAASV,IACTwB,IAAOC,MAAMzB,GAF7B,0CAIe,GAJf,aAMc,IAAI0B,MAAM,0DANxB,4CAZE,sBAsBF,OACI,kBAAC,IAAD,CACIC,aAAa,EACbC,QAlBR,WACId,GAAa,IAkBTe,QAASlB,EACTmB,MAAO,QAEP,kBAACC,EAAD,KACI,0EACA,kBAAC,IAAD,CACIV,KAAMA,EACNW,OAAQ,WACRxC,MAAO,CAAEsC,MAAO,SAChBf,SAAUA,EACVkB,cAAe,CACXC,YAAa,GACbC,YAAa,GACbC,eAAgB,QAChBC,gBAAiB,KAGrB,kBAAC,IAAKC,KAAN,CACIC,MAAO,2BACPzE,KAAM,cACN0E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gDAEnC,kBAAC,IAAD,CACIC,YAAW,UAAK/B,EAAL,MACXgC,YAAa,gDAGrB,kBAAC,IAAKN,KAAN,CACIC,MAAO,2BACPzE,KAAM,cACN0E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gDAEnC,kBAAC,IAAD,CAAOE,YAAa,gDAGxB,kBAAC,IAAKN,KAAN,CACIC,MAAO,2BACPzE,KAAM,kBACN0E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gDAEnC,kBAAC,IAAD,CAAQG,YAAU,GACb7B,EAASpB,KACN,SAACkD,GACG,OACI,kBAAC7B,EAAD,CACIlB,IAAK+C,EAAG/E,QACRiC,MAAO8C,EAAG/E,SAET+E,EAAGhF,WAQ5B,kBAAC,IAAKwE,KAAN,CACIC,MAAO,eACPzE,KAAM,iBACN0E,MAAO,CACH,CAAEC,UAAU,EAAMC,QAAS,0DAC3B,CACIK,UAxF1B,8CAyF0BL,QAAS,4DAIjB,kBAAC,IAAD,CAAOE,YAAa,4DAGxB,kBAAC,IAAKN,KAAN,CAAW9C,MAAO,CAAEwD,UAAW,UAC3B,kBAAC,IAAD,CAAQ9E,KAAM,UAAW+E,SAAU,UAAnC,qBAUlBlB,EAAY5B,IAAOC,IAAV,wJ,QC9GF8C,EAAY,WACrB,MAAkCC,oBAAS,GAA3C,mBAAOxC,EAAP,KAAkBG,EAAlB,KACMsC,EAAWC,cAoBjB,OACI,6BACI,kBAAC,IAAD,CACInF,KAAK,UACLwB,KAAM,kBAAC4D,EAAA,EAAD,MACNC,KAAK,QACL/D,MAAO,CAAEsC,MAAO,SAChBvC,QAjBZ,WACIuB,GAAa,KAWT,4BASA,kBAAC,EAAD,CACIH,UAAWA,EACXG,aAAcA,EACdC,SApBK,SAACyC,GACd/C,QAAQC,IAAI,SAAU8C,GACtB1C,GAAa,GAdjB,SAAmB0C,GACf/C,QAAQC,IAAI,aACZD,QAAQC,IAAI,mDAAY8C,GACxB1C,GAAa,GACbsC,EAASK,aAAa,IACtB1E,IAAGC,KAAK,OAAQ,QAAS,CAAE0E,YAAaF,IAUxCG,CAAUH,QClBH,SAASI,IACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJ,kBAAC,IAAD,KACI,kBAAC,EAAD,Q,+FCdVC,GAASC,wBAOFC,GAAI,uCAAG,WAChBC,GADgB,iCAAAzC,EAAA,8FAEoC,GAAlD0C,EAFc,EAEdA,KAFc,EAERC,MAFQ,EAEDC,QAAYC,EAFX,kBAYoB,SAR9BC,EAJU,aAKZC,OAAQ,MACRH,QAAS,CACL,eAAgBF,EAAO,mBAAqB,KAE7CG,IAGIE,OAAOC,cACdP,GAAQ,WAAQQ,IAAGC,UAAUR,IAE7BI,EAAOK,KAAOC,KAAKF,UAAUR,GAAQ,IAfzB,kBAmBTW,OACFC,MADE,UACOhB,GADP,YACiBG,GAAYK,GAC/BS,KAFE,uCAEG,WAAOC,GAAP,iBAAAxD,EAAA,sEACiBwD,EAASC,OAD1B,UACIf,EADJ,QAEEc,EAASE,GAFX,oBAGgBC,EAAejB,EAArBA,KACM,IADeA,EAAVkB,MAHrB,yCAKaD,GALb,gCAOaE,QAAQC,OAAOpB,IAP5B,yDAUSmB,QAAQC,OAAOpB,IAVxB,4CAFH,wDAnBS,2CAAH,sDCHJqB,GAAmB,SAAC9E,GAO7BC,QAAQC,IAAI,kBAAmBF,EAAMG,WACrC,IAAQA,EAAsCH,EAAtCG,UAAWG,EAA2BN,EAA3BM,aAAcC,EAAaP,EAAbO,SACzBE,EAAWC,IAAXD,OACR,EAAoCkC,oBAAS,GAA7C,mBAAOoC,EAAP,KAAmBC,EAAnB,KACA,EAAgCrC,oBAAS,GAAzC,mBAAOsC,EAAP,KAAiBC,EAAjB,KAKA,MAAevE,IAAKC,UAAbC,EAAP,oBAVE,4CAYF,8BAAAE,EAAA,sEACsBwC,GAAK,wBAD3B,OACUmB,EADV,OAEIzE,QAAQC,IAAI,cAAewE,GACnBS,EAAaT,EAAbS,SACRH,EAAcG,GAJlB,4CAZE,kEAmBF,gCAAApE,EAAA,sEACsBwC,GAAK,sBAD3B,OACUmB,EADV,OAEIzE,QAAQC,IAAI,cAAewE,GACnBU,EAAaV,EAAbU,SACAC,EAAcD,EAAdC,UAIJH,GAHCG,GALT,4CAnBE,sBAuCF,OARA3G,qBAAU,WACFyB,IACAF,QAAQC,IAAI,4BAjClB,mCAkCMoF,GAlCN,mCAmCMC,MAEL,CAACpF,IAGA,kBAAC,IAAD,CACIgB,aAAa,EACbC,QAnCR,WACId,GAAa,IAmCTe,QAASlB,EACTmB,MAAO,QAEP,kBAAC,GAAD,KACI,0EACA,kBAAC,IAAD,CACIT,KAAMA,EACNW,OAAQ,WACRxC,MAAO,CAAEsC,MAAO,SAChBf,SAAUA,EACVkB,cAAe,CACX+D,KAAM,IAGV,kBAAC,IAAK1D,KAAN,CACIC,MAAO,uCACPzE,KAAM,OACN0E,MAAO,CACH,CAAEC,UAAU,EAAMC,QAAS,4DAG/B,kBAAC,IAAD,CAAQG,YAAU,GACd,kBAAC5B,EAAD,CAAQlB,IAAK,EAAGC,MAAO,GAAvB,UAGA,kBAACiB,EAAD,CAAQlB,IAAK,EAAGC,MAAO,GAAvB,YAMPuF,EACG,kBAAC,IAAKjD,KAAN,CACIC,MAAO,qBACPzE,KAAM,SACN0E,MAAO,CACH,CAAEC,UAAU,EAAMC,QAAS,0CAG/B,kBAAC,IAAD,CAAOE,YAAa,0CAExB,KAEH6C,EACG,kBAAC,IAAKnD,KAAN,CACIC,MAAO,+BACPzE,KAAM,UACN0E,MAAO,CACH,CAAEC,UAAU,EAAMC,QAAS,kCAG/B,kBAAC,IAAD,CAAQG,YAAU,GACd,kBAAC5B,EAAD,CAAQlB,IAAK,EAAGC,MAAO,SAAvB,uCAGA,kBAACiB,EAAD,CAAQlB,IAAK,EAAGC,MAAO,SAAvB,uCAGA,kBAACiB,EAAD,CAAQlB,IAAK,EAAGC,MAAO,SAAvB,yCAKR,KAEJ,kBAAC,IAAKsC,KAAN,CAAW9C,MAAO,CAAEwD,UAAW,UAC3B,kBAAC,IAAD,CAAQ9E,KAAM,UAAW+E,SAAU,UAAnC,qBAUlBlB,GAAY5B,IAAOC,IAAV,wJCzHF6F,GAAe,WACxB,MAAkC9C,oBAAS,GAA3C,mBAAOxC,EAAP,KAAkBG,EAAlB,KACMsC,EAAWC,cAwCjB,OACI,6BACI,kBAAC,IAAD,CACInF,KAAK,UACLwB,KAAM,kBAAC4D,EAAA,EAAD,MACNC,KAAK,QACL/D,MAAO,CAAEsC,MAAO,SAChBvC,QArCZ,WACIuB,GAAa,KA+BT,4BASA,kBAAC,GAAD,CACIH,UAAWA,EACXG,aAAcA,EACdC,SAxCK,SACbyC,GAEA/C,QAAQC,IAAI,uCAAU8C,GACtB,IAAQwC,EAA0BxC,EAA1BwC,KAAME,EAAoB1C,EAApB0C,OAAQC,EAAY3C,EAAZ2C,QAChBC,EAAOC,IAAEC,OACX,CACIN,OACAE,SACAC,WAEJE,IAAEE,aAGN9F,QAAQC,IAAI,OAAQ0F,GA1BxB,SACI5C,GAEA1C,GAAa,GACbsC,EAASK,aAAa,IACtB1E,IAAGC,KAAK,UAAW,QAAS,CAAEwH,YAAahD,IA8B3CiD,CAAaL,QCzCN,SAASxC,KACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJ,kBAAC,IAAD,KACI,kBAAC,GAAD,QCHD,SAAS8C,KACpB,IAAMC,EANW,WACjB,IAAMC,EAAQC,cAAcC,SAASC,MAAM,KAC3C,OAAOH,EAAMA,EAAMzH,OAAS,GAIV6H,GAClB,OACI,kBAAC,GAAD,KACI,kBAACC,GAAD,KACI,kBAAC,IAAD,CAAMC,KAAM,SAAUC,aAAc,CAACR,IACjC,kBAAC,IAAKrE,KAAN,CAAWvC,IAAK,QACZ,kBAAC,IAAD,CAAMqH,GAAI,QAAV,6BAEJ,kBAAC,IAAK9E,KAAN,CAAWvC,IAAK,WACZ,kBAAC,IAAD,CAAMqH,GAAI,WAAV,+BAIZ,kBAACC,GAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOxI,KAAI,QAAWyI,QAAS,kBAAC,EAAD,QAC/B,kBAAC,IAAD,CAAOzI,KAAI,WAAcyI,QAAS,kBAAC,GAAD,QAClC,kBAAC,IAAD,CACIF,GAAIxC,OAAO2C,SAAST,SAAW,QAC/BU,SAAS,OAQjC,I,wBAAMP,GAAQ9G,IAAOsH,MAAV,2FAKLJ,GAAOlH,IAAOC,IAAV,4HAMJ2B,GAAY5B,IAAOC,IAAV,yG,8BC5CFsH,GAAY,WACrB,IAAMC,EAAOnJ,YAAYoJ,KACnBC,EAAYrJ,YAAYsJ,KACxB1E,EAAWC,cAWjB,OATAnE,qBAAU,WACNuB,QAAQC,IAAI,yBAAWiH,KACxB,CAACA,IAQA,kBAAC,IAAD,CACII,UAAU,EACVpG,aAAa,EACbC,QATR,WACInB,QAAQC,IAAI,qBACZ0C,EAASK,aAAa,KAQlB5B,QAASgG,EACT/F,MAAO,QAEP,kBAAC,GAAD,KACI,kBAACkG,GAAD,KACI,kBAAC,KAAD,CAAMC,IAAI,4DAEd,kBAACC,GAAD,KACK,aAAIP,GAAMQ,UAAUvI,KAAI,SAACkD,EAAIhD,GAC1B,OACI,kBAAC,KAAD,CACIC,IAAKD,EACLN,MAAO,CAAEsC,MAAO,QAASsG,aAAc,QACvC1F,QAASI,EACT5E,KAAK,gBAU/B6D,GAAY5B,IAAOC,IAAV,gKAQT4H,GAAgB7H,IAAOC,IAAV,yHAOb8H,GAAgB/H,IAAOC,IAAV,uEC1DJ,SAASwD,KACpB,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,MACA,kBAAC,GAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO/E,KAAM,WAAYyI,QAAS,kBAACZ,GAAD,QAClC,kBAAC,IAAD,CAAUU,GAAI,aAGtB,kBAAC,GAAD,OAKZ,IAAMiB,GAAa,WACf,OACI,kBAACC,GAAD,CAAQC,SAAS,GACb,kBAACC,GAAD,CAAYC,KAAK,GACb,kBAAC,IAAD,CAAiBvK,KAAM,OAAQqB,QAASmJ,KAAxC,iCAIJ,kBAACC,GAAD,QAKN5G,GAAY5B,IAAOC,IAAV,yGAKTkI,GAASnI,YAAOyI,IAAPzI,CAAH,oHAKNqI,GAAarI,YAAOyI,IAAPzI,CAAH,4BACVwI,GAAcxI,IAAOC,IAAV,4BACXiH,GAAOlH,IAAO0I,KAAV","file":"static/js/4.7406854b.chunk.js","sourcesContent":["const templateList = [\n    {\n        name: 'React + TS + Redux 模板',\n        npmName: '@h-cli-template/react-ts-redux',\n        installCommand: 'yarn',\n        startCommand: 'npm run start',\n        type: 'normal',\n        version: '1.0.9',\n    },\n    {\n        name: 'Vue2 标准模板',\n        npmName: '@h-cli-template/vue2-template',\n        installCommand: 'yarn',\n        startCommand: 'npm run serve',\n        type: 'normal',\n        version: '1.0.9',\n    },\n    {\n        name: 'Vue3 标准模板',\n        npmName: '@h-cli-template/vue3-template',\n        installCommand: 'yarn',\n        startCommand: 'npm run serve',\n        type: 'normal',\n        version: '1.0.9',\n    },\n]\n\nfunction getTemplate() {\n    return templateList\n}\n\nmodule.exports = getTemplate\n","import React, { useEffect } from \"react\";\nimport { Button } from \"antd\";\nimport styled from \"@emotion/styled\";\nimport { CaretUpOutlined } from \"@ant-design/icons\";\nimport { ws } from \"context/ws-context\";\nimport { useMount } from \"utils\";\nimport { useSelector } from \"react-redux\";\nimport { selectAddress, selectFolder } from \"store/cwd.slice\";\n\nexport const FolderExplorer = () => {\n    const address = useSelector(selectAddress);\n    const folder = useSelector(selectFolder);\n\n    useMount(() => {\n        getCwd();\n    });\n\n    useEffect(() => {\n        if (address.length > 0) {\n            ws.send(\"cwd\", \"getcurrentList\");\n        }\n    }, [address]);\n\n    function getCwd() {\n        ws.send(\"cwd\", \"getcwd\");\n    }\n\n    function openParent() {\n        // console.log(\"openParent 发送\");\n        ws.send(\"cwd\", \"openParent\");\n    }\n\n    function openFolder(\n        path: string,\n        e: React.MouseEvent<HTMLElement, MouseEvent>\n    ) {\n        ws.send(\"cwd\", \"openFolder\", { path });\n    }\n\n    return (\n        <ExplorerContainer>\n            <ToolbarContainer>\n                <Button\n                    type=\"primary\"\n                    shape=\"circle\"\n                    onClick={openParent}\n                    style={{ margin: \"0px 10px\" }}\n                    icon={<CaretUpOutlined />}\n                />\n                {address.map((item, index) => {\n                    return (\n                        <span key={index}>\n                            <Button\n                                type=\"dashed\"\n                                value={item.name}\n                                style={{ margin: \"0px 5px\" }}\n                                onClick={(e) => {\n                                    openFolder(item.path, e);\n                                }}\n                            >\n                                {item.name}\n                            </Button>\n                            /\n                        </span>\n                    );\n                })}\n            </ToolbarContainer>\n            <FoldersContainer>\n                {folder.map((folder, index) => {\n                    return (\n                        <FolderItem\n                            key={index}\n                            onClick={(e) => {\n                                openFolder(folder.path, e);\n                            }}\n                        >\n                            {folder.name}\n                        </FolderItem>\n                    );\n                })}\n            </FoldersContainer>\n        </ExplorerContainer>\n    );\n};\n\nconst ExplorerContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n`;\nconst ToolbarContainer = styled.div`\n    flex: auto 0 0;\n`;\nconst FoldersContainer = styled.div`\n    flex: 100% 1 1;\n    overflow-x: hidden;\n    overflow-y: auto;\n`;\nconst FolderItem = styled.div`\n    padding: 16px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    user-select: none;\n    cursor: pointer;\n    position: relative;\n    :hover {\n        background: rgb(236, 248, 242);\n    }\n`;\n","import React from \"react\";\nimport { Button, Drawer, Form, Input, Select } from \"antd\";\nimport styled from \"@emotion/styled\";\nimport { selectCwd } from \"store/cwd.slice\";\nimport { useSelector } from \"react-redux\";\nimport semver from \"semver\";\n\nconst getProjectTemplate = require(\"@h-cli/template-list\");\nexport const ProjectInfoModal = (props: {\n    openModal: boolean;\n    setOpenModal: React.Dispatch<React.SetStateAction<boolean>>;\n    onFinish: (values: unknown) => void;\n}) => {\n    console.log(\"props.openModal\", props.openModal);\n    const cwd = useSelector(selectCwd);\n    const { openModal, setOpenModal, onFinish } = props;\n    const tempList = getProjectTemplate();\n    const { Option } = Select;\n\n    function close() {\n        setOpenModal(false);\n    }\n    const [form] = Form.useForm();\n\n    async function validator(rule: unknown, value: string) {\n        console.log(\"value\", value);\n        const res = semver.valid(value);\n        if (res) {\n            return true;\n        } else {\n            throw new Error(\"请输入合法的版本号\");\n        }\n    }\n\n    return (\n        <Drawer\n            forceRender={true}\n            onClose={close}\n            visible={openModal}\n            width={\"100%\"}\n        >\n            <Container>\n                <h1>请输入项目信息</h1>\n                <Form\n                    form={form}\n                    layout={\"vertical\"}\n                    style={{ width: \"80rem\" }}\n                    onFinish={onFinish}\n                    initialValues={{\n                        projectPath: \"\",\n                        projectName: \"\",\n                        projectVersion: \"1.0.0\",\n                        projectTemplate: \"\",\n                    }}\n                >\n                    <Form.Item\n                        label={\"项目地址\"}\n                        name={\"projectPath\"}\n                        rules={[{ required: true, message: \"请输入项目地址\" }]}\n                    >\n                        <Input\n                            addonBefore={`${cwd}\\\\`}\n                            placeholder={\"请输入项目地址\"}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        label={\"项目名称\"}\n                        name={\"projectName\"}\n                        rules={[{ required: true, message: \"请输入项目名称\" }]}\n                    >\n                        <Input placeholder={\"请输入项目名称\"} />\n                    </Form.Item>\n\n                    <Form.Item\n                        label={\"模板名称\"}\n                        name={\"projectTemplate\"}\n                        rules={[{ required: true, message: \"请选择模板名称\" }]}\n                    >\n                        <Select allowClear>\n                            {tempList.map(\n                                (el: { npmName: string; name: string }) => {\n                                    return (\n                                        <Option\n                                            key={el.npmName}\n                                            value={el.npmName}\n                                        >\n                                            {el.name}\n                                        </Option>\n                                    );\n                                }\n                            )}\n                        </Select>\n                    </Form.Item>\n\n                    <Form.Item\n                        label={\"版本\"}\n                        name={\"projectVersion\"}\n                        rules={[\n                            { required: true, message: \"请输入合法的版本号\" },\n                            {\n                                validator: validator,\n                                message: \"请输入合法的版本号\",\n                            },\n                        ]}\n                    >\n                        <Input placeholder={\"请输入合法的版本号\"} />\n                    </Form.Item>\n\n                    <Form.Item style={{ textAlign: \"right\" }}>\n                        <Button type={\"primary\"} htmlType={\"submit\"}>\n                            提交\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Container>\n        </Drawer>\n    );\n};\n\nconst Container = styled.div`\n    height: 80vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { PlayCircleOutlined } from \"@ant-design/icons\";\nimport { ws } from \"context/ws-context\";\nimport { ProjectInfoModal } from \"components/project-info-modal/index\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setLogsModal } from \"store/logs.slice\";\n\nexport const InitStart = () => {\n    const [openModal, setOpenModal] = useState(false);\n    const dispatch = useDispatch();\n\n    function startInit(values: unknown) {\n        console.log(\"startInit\");\n        console.log(\"表单最后获取的值\", values);\n        setOpenModal(false);\n        dispatch(setLogsModal(true));\n        ws.send(\"init\", \"start\", { projectinfo: values });\n    }\n\n    function open() {\n        setOpenModal(true);\n    }\n\n    const onFinish = (values: unknown) => {\n        console.log(\"values\", values);\n        setOpenModal(false);\n        startInit(values);\n    };\n\n    return (\n        <div>\n            <Button\n                type=\"primary\"\n                icon={<PlayCircleOutlined />}\n                size=\"large\"\n                style={{ width: \"200px\" }}\n                onClick={open}\n            >\n                开始创建\n            </Button>\n            <ProjectInfoModal\n                openModal={openModal}\n                setOpenModal={setOpenModal}\n                onFinish={onFinish}\n            ></ProjectInfoModal>\n        </div>\n    );\n};\n","// import { send } from \"io\";\nimport React from \"react\";\nimport {\n    ScreenContainer,\n    FlodConatiner,\n    ButtonConatiner,\n} from \"components/lib\";\nimport { FolderExplorer } from \"components/folder-explorer/index\";\nimport { InitStart } from \"components/init-start/index\";\n\nexport default function Views(): JSX.Element {\n    return (\n        <ScreenContainer>\n            <FlodConatiner>\n                <FolderExplorer></FolderExplorer>\n            </FlodConatiner>\n            <ButtonConatiner>\n                <InitStart></InitStart>\n            </ButtonConatiner>\n        </ScreenContainer>\n    );\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport qs from \"qs\";\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\ninterface Config extends RequestInit {\n    token?: string;\n    data?: Record<string, unknown>;\n}\n\nexport const http = async (\n    endpoint: string,\n    { data, token, headers, ...customConfig }: Config = {}\n) => {\n    const config = {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": data ? \"application/json\" : \"\",\n        },\n        ...customConfig,\n    };\n\n    if (config.method.toUpperCase() === \"GET\") {\n        endpoint += `?${qs.stringify(data)}`;\n    } else {\n        config.body = JSON.stringify(data || {});\n    }\n\n    // axios 和 fetch 的表现不一样，axios可以直接在返回状态不为2xx的时候抛出异常\n    return window\n        .fetch(`${apiUrl}/${endpoint}`, config)\n        .then(async (response) => {\n            const data = await response.json();\n            if (response.ok) {\n                const { data: res, errno } = data;\n                if (errno === 0) {\n                    return res;\n                } else {\n                    return Promise.reject(data);\n                }\n            } else {\n                return Promise.reject(data);\n            }\n        });\n};\n","import React from \"react\";\nimport { Button, Drawer, Form, Input, Select } from \"antd\";\nimport styled from \"@emotion/styled\";\nimport { useEffect } from \"react\";\nimport { http } from \"utils/http\";\nimport { useState } from \"react\";\n\nexport const PublishInfoModal = (props: {\n    openModal: boolean;\n    setOpenModal: React.Dispatch<React.SetStateAction<boolean>>;\n    onFinish: (\n        values: Partial<{ prod: number; commit: string; incType: string }>\n    ) => void;\n}) => {\n    console.log(\"props.openModal\", props.openModal);\n    const { openModal, setOpenModal, onFinish } = props;\n    const { Option } = Select;\n    const [showCommit, setShowCommit] = useState(false);\n    const [showBump, setShowBump] = useState(false);\n\n    function close() {\n        setOpenModal(false);\n    }\n    const [form] = Form.useForm();\n\n    async function checkIfCommit() {\n        const res = await http(\"api/ui/checkIfCommit\");\n        console.log(\"getData res\", res);\n        const { ifCommit } = res;\n        setShowCommit(ifCommit);\n    }\n\n    async function checkIfBump() {\n        const res = await http(\"api/ui/checkIfBump\");\n        console.log(\"getData res\", res);\n        const { ifPrompt } = res;\n        const { resBranch } = ifPrompt;\n        if (!resBranch) {\n            setShowBump(true);\n        } else {\n            setShowBump(false);\n        }\n    }\n\n    useEffect(() => {\n        if (openModal) {\n            console.log(\"被打开了\");\n            checkIfCommit();\n            checkIfBump();\n        }\n    }, [openModal]);\n\n    return (\n        <Drawer\n            forceRender={true}\n            onClose={close}\n            visible={openModal}\n            width={\"100%\"}\n        >\n            <Container>\n                <h1>请输入发布信息</h1>\n                <Form\n                    form={form}\n                    layout={\"vertical\"}\n                    style={{ width: \"80rem\" }}\n                    onFinish={onFinish}\n                    initialValues={{\n                        prod: 0,\n                    }}\n                >\n                    <Form.Item\n                        label={\"是否发布正式\"}\n                        name={\"prod\"}\n                        rules={[\n                            { required: true, message: \"请选择是否发布正式\" },\n                        ]}\n                    >\n                        <Select allowClear>\n                            <Option key={1} value={1}>\n                                是\n                            </Option>\n                            <Option key={0} value={0}>\n                                否\n                            </Option>\n                        </Select>\n                    </Form.Item>\n\n                    {showCommit ? (\n                        <Form.Item\n                            label={\"commit信息\"}\n                            name={\"commit\"}\n                            rules={[\n                                { required: true, message: \"请输入commit信息\" },\n                            ]}\n                        >\n                            <Input placeholder={\"请输入commit信息\"} />\n                        </Form.Item>\n                    ) : null}\n\n                    {showBump ? (\n                        <Form.Item\n                            label={\"版本bump方式\"}\n                            name={\"incType\"}\n                            rules={[\n                                { required: true, message: \"版本bump方式\" },\n                            ]}\n                        >\n                            <Select allowClear>\n                                <Option key={2} value={\"patch\"}>\n                                    patch小版本升级\n                                </Option>\n                                <Option key={3} value={\"minor\"}>\n                                    minor中版本升级\n                                </Option>\n                                <Option key={4} value={\"major\"}>\n                                    major大版本升级\n                                </Option>\n                            </Select>\n                        </Form.Item>\n                    ) : null}\n\n                    <Form.Item style={{ textAlign: \"right\" }}>\n                        <Button type={\"primary\"} htmlType={\"submit\"}>\n                            提交\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Container>\n        </Drawer>\n    );\n};\n\nconst Container = styled.div`\n    height: 80vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { PlayCircleOutlined } from \"@ant-design/icons\";\nimport _ from \"lodash\";\n\nimport { ws } from \"context/ws-context\";\nimport { PublishInfoModal } from \"components/publish-info-modal/index\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setLogsModal } from \"store/logs.slice\";\n\nexport const PublishStart = () => {\n    const [openModal, setOpenModal] = useState(false);\n    const dispatch = useDispatch();\n\n    function startPublish(\n        values: Partial<{ prod: number; commit: string; incType: string }>\n    ) {\n        setOpenModal(false);\n        dispatch(setLogsModal(true));\n        ws.send(\"publish\", \"start\", { publishinfo: values });\n    }\n\n    function open() {\n        setOpenModal(true);\n    }\n\n    const onFinish = (\n        values: Partial<{ prod: number; commit: string; incType: string }>\n    ) => {\n        console.log(\"开始发布参数\", values);\n        const { prod, commit, incType } = values;\n        const info = _.omitBy(\n            {\n                prod,\n                commit,\n                incType,\n            },\n            _.isUndefined\n        );\n\n        console.log(\"info\", info);\n\n        // inlinepreset参数模板\n        // const publishInfo = {\n        //     prod: false, // 是否正式发布\n        //     commit: \"ci: 测试inlinepreset\",\n        //     incType: \"patch\",\n        // };\n\n        startPublish(info);\n    };\n\n    return (\n        <div>\n            <Button\n                type=\"primary\"\n                icon={<PlayCircleOutlined />}\n                size=\"large\"\n                style={{ width: \"200px\" }}\n                onClick={open}\n            >\n                开始发布\n            </Button>\n            <PublishInfoModal\n                openModal={openModal}\n                setOpenModal={setOpenModal}\n                onFinish={onFinish}\n            ></PublishInfoModal>\n        </div>\n    );\n};\n","import React from \"react\";\nimport {\n    ScreenContainer,\n    FlodConatiner,\n    ButtonConatiner,\n} from \"components/lib\";\nimport { FolderExplorer } from \"components/folder-explorer/index\";\nimport { PublishStart } from \"components/publish-start/index\";\n\nexport default function Views(): JSX.Element {\n    return (\n        <ScreenContainer>\n            <FlodConatiner>\n                <FolderExplorer></FolderExplorer>\n            </FlodConatiner>\n            <ButtonConatiner>\n                <PublishStart></PublishStart>\n            </ButtonConatiner>\n        </ScreenContainer>\n    );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navigate, Route, Routes, useLocation } from \"react-router\";\nimport styled from \"@emotion/styled\";\nimport { Menu } from \"antd\";\nimport Init from \"./init\";\nimport Publish from \"./publish\";\n\nconst useRouteType = () => {\n    const units = useLocation().pathname.split(\"/\");\n    return units[units.length - 1];\n};\n\nexport default function MainPage(): JSX.Element {\n    const routeType = useRouteType();\n    return (\n        <Container>\n            <Aside>\n                <Menu mode={\"inline\"} selectedKeys={[routeType]}>\n                    <Menu.Item key={\"init\"}>\n                        <Link to={\"init\"}>项目创建</Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"publish\"}>\n                        <Link to={\"publish\"}>项目发布</Link>\n                    </Menu.Item>\n                </Menu>\n            </Aside>\n            <Main>\n                <Routes>\n                    <Route path={`/init`} element={<Init />} />\n                    <Route path={`/publish`} element={<Publish />} />\n                    <Navigate\n                        to={window.location.pathname + \"/init\"}\n                        replace={true}\n                    />\n                </Routes>\n            </Main>\n        </Container>\n    );\n}\n\nconst Aside = styled.aside`\n    background-color: rgb(244, 245, 247);\n    display: flex;\n`;\n\nconst Main = styled.div`\n    box-shadow: -5px 0 5px -5px rgba(0, 0, 0, 0.1);\n    display: flex;\n    overflow: hidden;\n`;\n\nconst Container = styled.div`\n    display: grid;\n    grid-template-columns: 16rem 1fr;\n    width: 100%;\n`;\n","import React from \"react\";\nimport { Drawer, Alert, Spin } from \"antd\";\nimport styled from \"@emotion/styled\";\nimport { selectLogs, selectLogsModal, setLogsModal } from \"store/logs.slice\";\nimport { useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nexport const LogsModal = () => {\n    const logs = useSelector(selectLogs);\n    const logsModal = useSelector(selectLogsModal);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        console.log(\"logs改变了\", logs);\n    }, [logs]);\n\n    function close() {\n        console.log(\"触发close\");\n        dispatch(setLogsModal(false));\n    }\n\n    return (\n        <Drawer\n            closable={false}\n            forceRender={true}\n            onClose={close}\n            visible={logsModal}\n            width={\"100%\"}\n        >\n            <Container>\n                <SpinContainer>\n                    <Spin tip=\"命令执行中，请稍等\"></Spin>\n                </SpinContainer>\n                <LogsContainer>\n                    {[...logs].reverse().map((el, index) => {\n                        return (\n                            <Alert\n                                key={index}\n                                style={{ width: \"60rem\", marginBottom: \"1rem\" }}\n                                message={el}\n                                type=\"info\"\n                            />\n                        );\n                    })}\n                </LogsContainer>\n            </Container>\n        </Drawer>\n    );\n};\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    height: 100%;\n`;\n\nconst SpinContainer = styled.div`\n    flex: 10% 0 0;\n    align-self: center;\n    display: flex;\n    align-items: center;\n`;\n\nconst LogsContainer = styled.div`\n    flex: 70% 0 0;\n    overflow: auto;\n`;\n","import React from \"react\";\nimport MainPage from \"./main\";\nimport styled from \"@emotion/styled\";\nimport { ButtonNoPadding, Row } from \"components/lib\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport { resetRoute } from \"utils\";\nimport { LogsModal } from \"components/logs-modal/index\";\n\nexport default function Views(): JSX.Element {\n    return (\n        <Container>\n            <PageHeader />\n            <Main>\n                <Routes>\n                    <Route path={\"/index/*\"} element={<MainPage />} />\n                    <Navigate to={\"/index\"} />\n                </Routes>\n            </Main>\n            <LogsModal></LogsModal>\n        </Container>\n    );\n}\n\nconst PageHeader = () => {\n    return (\n        <Header between={true}>\n            <HeaderLeft gap={true}>\n                <ButtonNoPadding type={\"link\"} onClick={resetRoute}>\n                    h-cli 脚手架 GUI\n                </ButtonNoPadding>\n            </HeaderLeft>\n            <HeaderRight></HeaderRight>\n        </Header>\n    );\n};\n\nconst Container = styled.div`\n    display: grid;\n    grid-template-rows: 6rem 1fr;\n    height: 100vh;\n`;\nconst Header = styled(Row)`\n    padding: 3.2rem;\n    box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.1);\n    z-index: 1;\n`;\nconst HeaderLeft = styled(Row)``;\nconst HeaderRight = styled.div``;\nconst Main = styled.main`\n    display: flex;\n    overflow: hidden;\n`;\n"],"sourceRoot":""}