{"version":3,"sources":["components/error-boundary.tsx","io/initSubscribe.tsx","utils/folderUtils.tsx","App.tsx","reportWebVitals.ts","store/index.ts","context/index.tsx","index.tsx","store/logs.slice.ts","components/lib.tsx","utils/index.ts","utils/use-async.ts","context/ws-context.tsx","io/index.ts","store/cwd.slice.ts"],"names":["ErrorBoundary","state","error","this","props","fallbackRender","children","React","Component","handleCommandProgress","action","payload","dispatch","progress","setLogs","key","Date","now","btn","type","size","onClick","notification","close","setLogsModal","setLogsClean","open","message","description","duration","onClose","initSubscribe","ws","subscribeIO","setAdd","data","cwd","list","path","parts","startIndex","index","addPart","folder","substring","slice","push","name","indexOf","length","slicePath","setAddress","setCwd","setFold","setFolder","handleCwdEvent","handleInitEvent","handlePublishEvent","Views","lazy","App","useDispatch","useMount","className","FullPageErrorFallback","Suspense","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","cwdSlice","reducer","logs","logsSlice","store","configureStore","AppProviders","ReactDOM","render","StrictMode","document","getElementById","createSlice","initialState","logsModal","reducers","actions","selectLogs","selectLogsModal","Row","styled","div","between","undefined","marginBottom","gap","FullPage","FullPageLoading","Text","ButtonNoPadding","Button","ScreenContainer","FlodConatiner","ButtonConatiner","callback","useEffect","resetRoute","window","location","href","origin","useMountedRef","mountedRef","useRef","current","defaultInitialState","stat","defaultConfig","throwOnError","useAsync","initialConfig","config","useReducer","safeDispatch","useCallback","useSafeDispatch","useState","retry","setRetry","setData","setError","run","promise","runConfig","Error","catch","Promise","reject","isIdle","isLoading","isError","isSuccess","socket","id","console","log","resolve","io","on","event","cb","emit","bootstrapWs","a","connectIO","WsProvider","addressArr","folderList","selectAddress","selectFolder","selectCwd"],"mappings":"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","file":"static/js/main.00c50be3.chunk.js","sourcesContent":["import React from \"react\";\n\ntype FallbackRender = (props: { error: Error | null }) => React.ReactElement;\n\n// https://github.com/bvaughn/react-error-boundary\nexport class ErrorBoundary extends React.Component<\n    React.PropsWithChildren<{ fallbackRender: FallbackRender }>,\n    { error: Error | null }\n> {\n    state = { error: null };\n\n    // 当子组件抛出异常，这里会接收到并且调用\n    static getDerivedStateFromError(error: Error) {\n        return { error };\n    }\n\n    render() {\n        const { error } = this.state;\n        const { fallbackRender, children } = this.props;\n        if (error) {\n            return fallbackRender({ error });\n        }\n        return children;\n    }\n}\n","import { ws } from \"context/ws-context\";\nimport { slicePath } from \"utils/folderUtils\";\nimport { foldListType, setAddress, setFolder, setCwd } from \"store/cwd.slice\";\nimport { setLogs, setLogsModal, setLogsClean } from \"store/logs.slice\";\nimport { Dispatch } from \"redux\";\nimport { notification } from \"antd\";\nimport { Button } from \"antd\";\nimport React from \"react\";\n\nfunction initSubscribe(dispatch: Dispatch) {\n    ws.subscribeIO(\"cwd\", (action, payload) => {\n        handleCwdEvent(action, payload, dispatch);\n    });\n    ws.subscribeIO(\"init\", (action, payload) => {\n        handleInitEvent(action, payload, dispatch);\n    });\n    ws.subscribeIO(\"publish\", (action, payload) => {\n        handlePublishEvent(action, payload, dispatch);\n    });\n}\n\nfunction handlePublishEvent(\n    action: string,\n    payload: Record<string, unknown>,\n    dispatch: Dispatch\n) {\n    handleCommandProgress(action, payload, dispatch);\n}\n\nfunction handleInitEvent(\n    action: string,\n    payload: Record<string, unknown>,\n    dispatch: Dispatch\n) {\n    handleCommandProgress(action, payload, dispatch);\n}\n\nfunction handleCwdEvent(\n    action: string,\n    payload: Record<string, unknown>,\n    dispatch: Dispatch\n) {\n    function setAdd(data: Record<string, unknown>) {\n        const { cwd } = data;\n        const list = slicePath(cwd as string);\n        dispatch(setAddress(list));\n        dispatch(setCwd(cwd));\n    }\n    function setFold(data: Record<string, unknown>) {\n        const { list } = data;\n        dispatch(setFolder(list as foldListType[]));\n    }\n    if (action === \"getcwd\") {\n        setAdd(payload);\n    } else if (action === \"openParent\") {\n        setAdd(payload);\n    } else if (action === \"getcurrentList\") {\n        setFold(payload);\n    } else if (action === \"openFolder\") {\n        setAdd(payload);\n    }\n}\nfunction handleCommandProgress(\n    action: string,\n    payload: Record<string, unknown>,\n    dispatch: Dispatch\n) {\n    if (action === \"start\") {\n        const { progress } = payload;\n        dispatch(setLogs(progress));\n    } else if (action === \"startEnd\") {\n        const key = `open${Date.now()}`;\n        const btn = (\n            <Button\n                type=\"primary\"\n                size=\"small\"\n                onClick={() => {\n                    notification.close(key);\n                    dispatch(setLogsModal(false));\n                    dispatch(setLogsClean());\n                }}\n            >\n                立即关闭\n            </Button>\n        );\n        notification.open({\n            message: \"通知\",\n            description: \"命令执行完成 弹窗将在30秒后关闭\",\n            duration: 30,\n            key,\n            btn,\n            onClose: () => {\n                dispatch(setLogsModal(false));\n                dispatch(setLogsClean());\n            },\n        });\n    }\n}\nexport default initSubscribe;\n","// 拆解path\nexport function slicePath(path: string) {\n    const parts: { name: string; path: string }[] = [];\n    let startIndex = 0;\n    let index = 0;\n    const findSeparator = () => {\n        index = path.indexOf(\"/\", startIndex);\n        if (index === -1) index = path.indexOf(\"\\\\\", startIndex);\n        return index !== -1;\n    };\n    const addPart = (index: number) => {\n        const folder = path.substring(startIndex, index);\n        const slice = path.substring(0, index + 1);\n        parts.push({\n            name: folder,\n            path: slice,\n        });\n    };\n    while (findSeparator()) {\n        addPart(index);\n        startIndex = index + 1;\n    }\n    if (startIndex < path.length) addPart(path.length);\n    return parts;\n}\n","import React from \"react\";\nimport \"./App.css\";\n// import Views from \"views/index\";\nimport { ErrorBoundary } from \"components/error-boundary\";\nimport { FullPageErrorFallback, FullPageLoading } from \"components/lib\";\nimport { useMount } from \"utils\";\nimport initSubscribe from \"io/initSubscribe\";\nimport { useDispatch } from \"react-redux\";\n\nconst Views = React.lazy(() => import(\"views/index\"));\n\nfunction App(): JSX.Element {\n    const dispatch = useDispatch();\n    useMount(() => {\n        initSubscribe(dispatch);\n    });\n    return (\n        <div className=\"App\">\n            <ErrorBoundary fallbackRender={FullPageErrorFallback}>\n                <React.Suspense fallback={<FullPageLoading />}>\n                    <Views></Views>\n                </React.Suspense>\n            </ErrorBoundary>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { cwdSlice } from \"store/cwd.slice\";\nimport { logsSlice } from \"store/logs.slice\";\n\nexport const rootReducer = {\n    cwd: cwdSlice.reducer,\n    logs: logsSlice.reducer,\n};\n\nexport const store = configureStore({\n    reducer: rootReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","import React, { ReactNode } from \"react\";\nimport { WsProvider } from \"context/ws-context\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { store } from \"store\";\n\nexport const AppProviders = ({\n    children,\n}: {\n    children: ReactNode;\n}): JSX.Element => {\n    return (\n        <Provider store={store}>\n            <Router>\n                <WsProvider>{children}</WsProvider>\n            </Router>\n        </Provider>\n    );\n};\n","import \"./wdyr\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.less\";\nimport { AppProviders } from \"context\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppProviders>\n            <App />\n        </AppProviders>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"store/index\";\n\ninterface State {\n    logs: string[];\n    logsModal: boolean;\n}\n\nconst initialState: State = {\n    logs: [],\n    logsModal: false,\n};\n\nexport const logsSlice = createSlice({\n    name: \"logs\",\n    initialState,\n    reducers: {\n        setLogs(state, action) {\n            state.logs.push(action.payload);\n        },\n        setLogsModal(state, action) {\n            state.logsModal = action.payload;\n        },\n        setLogsClean(state) {\n            state.logs = [];\n        },\n    },\n});\n\nexport const { setLogs, setLogsModal, setLogsClean } = logsSlice.actions;\n\nexport const selectLogs = (state: RootState) => state.logs.logs;\nexport const selectLogsModal = (state: RootState) => state.logs.logsModal;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { Button, Spin, Typography } from \"antd\";\n\nexport const Row = styled.div<{\n    gap?: number | boolean;\n    between?: boolean;\n    marginBottom?: number;\n}>`\n    display: flex;\n    align-items: center;\n    justify-content: ${(props) =>\n        props.between ? \"space-between\" : undefined};\n    margin-bottom: ${(props) => props.marginBottom + \"rem\"};\n    > * {\n        margin-top: 0 !important;\n        margin-bottom: 0 !important;\n        margin-right: ${(props) =>\n            typeof props.gap === \"number\"\n                ? props.gap + \"rem\"\n                : props.gap\n                ? \"2rem\"\n                : undefined};\n    }\n`;\n\nconst FullPage = styled.div`\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const FullPageLoading = () => (\n    <FullPage>\n        <Spin size={\"large\"} />\n    </FullPage>\n);\n\nexport const FullPageErrorFallback = ({ error }: { error: Error | null }) => (\n    <FullPage>\n        <Typography.Text type={\"danger\"}>{error?.message}</Typography.Text>\n    </FullPage>\n);\n\nexport const ButtonNoPadding = styled(Button)`\n    padding: 0;\n`;\n\nexport const ScreenContainer = styled.div`\n    padding: 3.2rem;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const FlodConatiner = styled.div`\n    flex: 100% 1 1;\n    height: 100%;\n    overflow: hidden;\n`;\n\nexport const ButtonConatiner = styled.div`\n    flex: auto 0 0;\n    padding: 1rem;\n    text-align: center;\n`;\n","import { useEffect, useRef } from \"react\";\n\nexport const isFalsy = (value: unknown) => (value === 0 ? false : !value);\n\nexport const isVoid = (value: unknown) =>\n    value === undefined || value === null || value === \"\";\n\nexport const useMount = (callback: () => void) => {\n    useEffect(() => {\n        callback();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n};\n\nexport const useDocumentTitle = (title: string, keepOnUnmount = true) => {\n    const oldTitle = useRef(document.title).current;\n    // 页面加载时: 旧title\n    // 加载后：新title\n\n    useEffect(() => {\n        document.title = title;\n    }, [title]);\n\n    useEffect(() => {\n        return () => {\n            if (!keepOnUnmount) {\n                // 如果不指定依赖，读到的就是旧title\n                document.title = oldTitle;\n            }\n        };\n    }, [keepOnUnmount, oldTitle]);\n};\n\nexport const resetRoute = () => (window.location.href = window.location.origin);\n\n/**\n * 传入一个对象，和键集合，返回对应的对象中的键值对\n * @param obj\n * @param keys\n */\nexport const subset = <\n    O extends { [key in string]: unknown },\n    K extends keyof O\n>(\n    obj: O,\n    keys: K[]\n) => {\n    const filteredEntries = Object.entries(obj).filter(([key]) =>\n        keys.includes(key as K)\n    );\n    return Object.fromEntries(filteredEntries) as Pick<O, K>;\n};\n\n/**\n * 返回组件的挂载状态，如果还没挂载或者已经卸载，返回false；反之，返回true\n */\nexport const useMountedRef = () => {\n    const mountedRef = useRef(false);\n    useEffect(() => {\n        mountedRef.current = true;\n        return () => {\n            mountedRef.current = false;\n        };\n    });\n    return mountedRef;\n};\n","import { useCallback, useReducer, useState } from \"react\";\nimport { useMountedRef } from \"utils/index\";\n\ninterface State<D> {\n    error: Error | null;\n    data: D | null;\n    stat: \"idle\" | \"loading\" | \"error\" | \"success\";\n}\n\nconst defaultInitialState: State<null> = {\n    stat: \"idle\",\n    data: null,\n    error: null,\n};\n\nconst defaultConfig = {\n    throwOnError: false,\n};\n\nconst useSafeDispatch = <T>(dispatch: (...args: T[]) => void) => {\n    const mountedRef = useMountedRef();\n    return useCallback(\n        (...args: T[]) => (mountedRef.current ? dispatch(...args) : void 0),\n        [dispatch, mountedRef]\n    );\n};\n\nexport const useAsync = <D>(\n    initialState?: State<D>,\n    initialConfig?: typeof defaultConfig\n) => {\n    const config = { ...defaultConfig, ...initialConfig };\n    const [state, dispatch] = useReducer(\n        (state: State<D>, action: Partial<State<D>>) => ({\n            ...state,\n            ...action,\n        }),\n        {\n            ...defaultInitialState,\n            ...initialState,\n        }\n    );\n    const safeDispatch = useSafeDispatch(dispatch);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const [retry, setRetry] = useState(() => () => {});\n\n    const setData = useCallback(\n        (data: D) =>\n            safeDispatch({\n                data,\n                stat: \"success\",\n                error: null,\n            }),\n        [safeDispatch]\n    );\n\n    const setError = useCallback(\n        (error: Error) =>\n            safeDispatch({\n                error,\n                stat: \"error\",\n                data: null,\n            }),\n        [safeDispatch]\n    );\n\n    // run 用来触发异步请求\n    const run = useCallback(\n        (promise: Promise<D>, runConfig?: { retry: () => Promise<D> }) => {\n            if (!promise || !promise.then) {\n                throw new Error(\"请传入 Promise 类型数据\");\n            }\n            setRetry(() => () => {\n                if (runConfig?.retry) {\n                    run(runConfig?.retry(), runConfig);\n                }\n            });\n            safeDispatch({ stat: \"loading\" });\n            return promise\n                .then((data) => {\n                    setData(data);\n                    return data;\n                })\n                .catch((error) => {\n                    // catch会消化异常，如果不主动抛出，外面是接收不到异常的\n                    setError(error);\n                    if (config.throwOnError) return Promise.reject(error);\n                    return error;\n                });\n        },\n        [config.throwOnError, setData, setError, safeDispatch]\n    );\n\n    return {\n        isIdle: state.stat === \"idle\",\n        isLoading: state.stat === \"loading\",\n        isError: state.stat === \"error\",\n        isSuccess: state.stat === \"success\",\n        run,\n        setData,\n        setError,\n        // retry 被调用时重新跑一遍run，让state刷新一遍\n        retry,\n        ...state,\n    };\n};\n","import React, { ReactNode } from \"react\";\nimport { useMount } from \"utils\";\nimport { useAsync } from \"utils/use-async\";\nimport { FullPageErrorFallback, FullPageLoading } from \"components/lib\";\nimport Ws from \"io\";\n\nexport const ws = new Ws();\n\nexport const bootstrapWs = async () => {\n    await ws.connectIO();\n    return ws;\n};\n\nexport const WsProvider = ({ children }: { children: ReactNode }) => {\n    const { error, isLoading, isIdle, isError, run } = useAsync<Ws | null>();\n    useMount(() => {\n        console.log(\"WsProvider\");\n        run(bootstrapWs());\n    });\n    if (isIdle || isLoading) {\n        return <FullPageLoading />;\n    }\n    if (isError) {\n        return <FullPageErrorFallback error={error} />;\n    }\n    return <div>{children}</div>;\n};\n","import io, { Socket } from \"socket.io-client\";\n\nexport interface msg {\n    action: string;\n    payload: Record<string, unknown>;\n}\n\nclass Ws {\n    socket: Socket | null;\n    id: string | null;\n    constructor() {\n        console.log(\"初始化ws\");\n        this.socket = null;\n        this.id = null;\n    }\n    connectIO() {\n        return new Promise((resolve, reject) => {\n            // 连接服务器, 得到与服务器的连接对象\n            this.socket = io(\"ws://localhost:3333\");\n            console.log(\"socket\", this.socket);\n            this.socket.on(\"connect\", () => {\n                if (this.socket) {\n                    this.id = this.socket.id;\n                    resolve(this.id);\n                }\n            });\n        });\n    }\n    subscribeIO(\n        event: string,\n        cb: (action: string, payload: Record<string, unknown>) => void\n    ) {\n        if (this.socket) {\n            this.socket.on(event, function (data: msg) {\n                // console.log(\"客户端接收服务器发送的消息\", data);\n                const { action, payload } = data;\n                // console.log(\"action, payload\", action, payload);\n                cb(action, payload);\n            });\n        }\n    }\n    send(event: string, action: string, payload = {}) {\n        if (this.socket) {\n            const data: msg = {\n                action,\n                payload,\n            };\n            // 发送消息\n            // console.log(\"客户端向服务器发消息\", data);\n            this.socket.emit(event, data);\n        }\n    }\n}\n\nexport default Ws;\n","import { createSlice } from \"@reduxjs/toolkit\";\n// import { bootstrapWs } from \"context/ws-context\";\n// import { AppDispatch } from \"store/index\";\nimport { RootState } from \"store/index\";\n\nexport interface foldListType {\n    name: string;\n    path: string;\n}\n\ninterface State {\n    addressArr: foldListType[];\n    folderList: foldListType[];\n    cwd: string;\n}\n\nconst initialState: State = {\n    addressArr: [],\n    folderList: [],\n    cwd: \"\",\n};\n\nexport const cwdSlice = createSlice({\n    name: \"cwd\",\n    initialState,\n    reducers: {\n        setCwd(state, action) {\n            state.cwd = action.payload;\n        },\n        setAddress(state, action) {\n            state.addressArr = action.payload;\n        },\n        setFolder(state, action) {\n            state.folderList = action.payload;\n        },\n    },\n});\n\nexport const { setAddress, setFolder, setCwd } = cwdSlice.actions;\n\nexport const selectAddress = (state: RootState) => state.cwd.addressArr;\nexport const selectFolder = (state: RootState) => state.cwd.folderList;\nexport const selectCwd = (state: RootState) => state.cwd.cwd;\n"],"sourceRoot":""}